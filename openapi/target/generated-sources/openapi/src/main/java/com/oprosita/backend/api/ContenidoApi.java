/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.oprosita.backend.api;

import com.oprosita.backend.model.generated.ContenidoItem;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-23T22:26:08.390066400+02:00[Europe/Madrid]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "contenido", description = "Gesti√≥n de contenido educativo")
public interface ContenidoApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /contenido/{id} : Eliminar un contenido
     *
     * @param id  (required)
     * @return Contenido eliminado correctamente (status code 204)
     */
    @Operation(
        operationId = "deleteContenido",
        summary = "Eliminar un contenido",
        tags = { "contenido" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Contenido eliminado correctamente")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/contenido/{id}"
    )
    
    default ResponseEntity<Void> deleteContenido(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /contenido/{id} : Actualizar un contenido
     *
     * @param id  (required)
     * @param contenidoItem  (required)
     * @return Contenido actualizado (status code 200)
     */
    @Operation(
        operationId = "updateContenido",
        summary = "Actualizar un contenido",
        tags = { "contenido" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Contenido actualizado")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/contenido/{id}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> updateContenido(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "ContenidoItem", description = "", required = true) @Valid @RequestBody ContenidoItem contenidoItem
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
