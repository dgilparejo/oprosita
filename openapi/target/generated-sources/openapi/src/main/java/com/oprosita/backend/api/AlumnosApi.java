/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.oprosita.backend.api;

import com.oprosita.backend.model.generated.ContenidoItem;
import com.oprosita.backend.model.generated.Grupo;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-23T22:26:08.390066400+02:00[Europe/Madrid]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "alumnos", description = "Gestión de alumnos")
public interface AlumnosApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /alumnos/{alumnoId}/contenido : Añadir contenido al alumno (texto + tipo + PDF)
     *
     * @param alumnoId  (required)
     * @param texto  (optional)
     * @param tipoContenido  (optional)
     * @param mes  (optional)
     * @param file  (optional)
     * @return Contenido añadido (status code 201)
     */
    @Operation(
        operationId = "addContenidoToAlumno",
        summary = "Añadir contenido al alumno (texto + tipo + PDF)",
        tags = { "alumnos", "contenido" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Contenido añadido")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/alumnos/{alumnoId}/contenido",
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<Void> addContenidoToAlumno(
        @Parameter(name = "alumnoId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("alumnoId") Integer alumnoId,
        @Parameter(name = "texto", description = "") @Valid @RequestParam(value = "texto", required = false) String texto,
        @Parameter(name = "tipoContenido", description = "") @Valid @RequestParam(value = "tipoContenido", required = false) String tipoContenido,
        @Parameter(name = "mes", description = "") @Valid @RequestParam(value = "mes", required = false) String mes,
        @Parameter(name = "file", description = "") @RequestPart(value = "file", required = false) MultipartFile file
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /alumnos/{id} : Eliminar un alumno
     *
     * @param id  (required)
     * @return Alumno eliminado correctamente (status code 204)
     */
    @Operation(
        operationId = "deleteAlumno",
        summary = "Eliminar un alumno",
        tags = { "alumnos" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Alumno eliminado correctamente")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/alumnos/{id}"
    )
    
    default ResponseEntity<Void> deleteAlumno(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /alumnos/{alumnoId}/contenido/{contenidoId} : Eliminar un contenido del alumno
     *
     * @param alumnoId  (required)
     * @param contenidoId  (required)
     * @return Contenido eliminado correctamente (status code 204)
     */
    @Operation(
        operationId = "deleteContenidoFromAlumno",
        summary = "Eliminar un contenido del alumno",
        tags = { "alumnos", "contenido" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Contenido eliminado correctamente")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/alumnos/{alumnoId}/contenido/{contenidoId}"
    )
    
    default ResponseEntity<Void> deleteContenidoFromAlumno(
        @Parameter(name = "alumnoId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("alumnoId") Integer alumnoId,
        @Parameter(name = "contenidoId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("contenidoId") Integer contenidoId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /alumnos/{alumnoId}/contenido : Obtener contenido de un alumno
     *
     * @param alumnoId  (required)
     * @return Lista de contenido (status code 200)
     */
    @Operation(
        operationId = "getContenidoByAlumno",
        summary = "Obtener contenido de un alumno",
        tags = { "alumnos", "contenido" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de contenido", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ContenidoItem.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/alumnos/{alumnoId}/contenido",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ContenidoItem>> getContenidoByAlumno(
        @Parameter(name = "alumnoId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("alumnoId") Integer alumnoId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"texto\" : \"texto\", \"alumnoId\" : 6, \"archivoId\" : 5, \"tipoContenido\" : \"temas\", \"mes\" : \"mes\", \"id\" : 0, \"grupoId\" : 1 }, { \"texto\" : \"texto\", \"alumnoId\" : 6, \"archivoId\" : 5, \"tipoContenido\" : \"temas\", \"mes\" : \"mes\", \"id\" : 0, \"grupoId\" : 1 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /alumnos/{alumnoId}/grupos : Obtener grupos de un alumno
     *
     * @param alumnoId  (required)
     * @return Lista de grupos (status code 200)
     */
    @Operation(
        operationId = "getGruposByAlumno",
        summary = "Obtener grupos de un alumno",
        tags = { "alumnos", "grupos" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de grupos", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Grupo.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/alumnos/{alumnoId}/grupos",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Grupo>> getGruposByAlumno(
        @Parameter(name = "alumnoId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("alumnoId") Integer alumnoId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"meses\" : [ { \"id\" : 6, \"nombre\" : \"nombre\" }, { \"id\" : 6, \"nombre\" : \"nombre\" } ], \"id\" : 0, \"nombre\" : \"nombre\" }, { \"meses\" : [ { \"id\" : 6, \"nombre\" : \"nombre\" }, { \"id\" : 6, \"nombre\" : \"nombre\" } ], \"id\" : 0, \"nombre\" : \"nombre\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
