/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.oprosita.backend.api;

import org.springframework.format.annotation.DateTimeFormat;
import com.oprosita.backend.model.generated.Novedad;
import java.time.OffsetDateTime;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-23T22:26:08.390066400+02:00[Europe/Madrid]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "novedades", description = "Sistema de novedades y notificaciones")
public interface NovedadesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /novedades/alumno : Crear novedad para alumnos
     *
     * @param novedad  (required)
     * @return Novedad creada (status code 201)
     */
    @Operation(
        operationId = "createNovedadAlumno",
        summary = "Crear novedad para alumnos",
        tags = { "novedades" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Novedad creada", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Novedad.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/novedades/alumno",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Novedad> createNovedadAlumno(
        @Parameter(name = "Novedad", description = "", required = true) @Valid @RequestBody Novedad novedad
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"texto\" : \"texto\", \"fechaCreacion\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"tipoDestinatario\" : \"profesor\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /novedades/profesor : Crear novedad para profesores
     *
     * @param novedad  (required)
     * @return Novedad creada (status code 201)
     */
    @Operation(
        operationId = "createNovedadProfesor",
        summary = "Crear novedad para profesores",
        tags = { "novedades" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Novedad creada", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Novedad.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/novedades/profesor",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Novedad> createNovedadProfesor(
        @Parameter(name = "Novedad", description = "", required = true) @Valid @RequestBody Novedad novedad
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"texto\" : \"texto\", \"fechaCreacion\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"tipoDestinatario\" : \"profesor\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /novedades/{id} : Eliminar una novedad
     *
     * @param id  (required)
     * @return Novedad eliminada correctamente (status code 204)
     */
    @Operation(
        operationId = "deleteNovedad",
        summary = "Eliminar una novedad",
        tags = { "novedades" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Novedad eliminada correctamente")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/novedades/{id}"
    )
    
    default ResponseEntity<Void> deleteNovedad(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /novedades/alumno : Eliminar todas las novedades para alumno
     *
     * @return Novedades eliminadas correctamente (status code 204)
     */
    @Operation(
        operationId = "deleteNovedadesAlumno",
        summary = "Eliminar todas las novedades para alumno",
        tags = { "novedades" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Novedades eliminadas correctamente")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/novedades/alumno"
    )
    
    default ResponseEntity<Void> deleteNovedadesAlumno(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /novedades/alumno : Obtener novedades para alumnos
     *
     * @return Lista de novedades (status code 200)
     */
    @Operation(
        operationId = "getNovedadesAlumno",
        summary = "Obtener novedades para alumnos",
        tags = { "novedades" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de novedades", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Novedad.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/novedades/alumno",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Novedad>> getNovedadesAlumno(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"texto\" : \"texto\", \"fechaCreacion\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"tipoDestinatario\" : \"profesor\" }, { \"texto\" : \"texto\", \"fechaCreacion\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"tipoDestinatario\" : \"profesor\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /novedades/profesor : Obtener novedades para profesores
     *
     * @param tipo  (optional)
     * @param fechaDesde  (optional)
     * @return Lista de novedades (status code 200)
     */
    @Operation(
        operationId = "getNovedadesProfesor",
        summary = "Obtener novedades para profesores",
        tags = { "novedades" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de novedades", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Novedad.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/novedades/profesor",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Novedad>> getNovedadesProfesor(
        @Parameter(name = "tipo", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tipo", required = false) String tipo,
        @Parameter(name = "fechaDesde", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fechaDesde", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime fechaDesde
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"texto\" : \"texto\", \"fechaCreacion\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"tipoDestinatario\" : \"profesor\" }, { \"texto\" : \"texto\", \"fechaCreacion\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"tipoDestinatario\" : \"profesor\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /novedades/alumno : Actualizar novedad para alumno
     *
     * @param novedad  (required)
     * @return Novedad actualizada (status code 200)
     */
    @Operation(
        operationId = "updateNovedadAlumno",
        summary = "Actualizar novedad para alumno",
        tags = { "novedades" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Novedad actualizada", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Novedad.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/novedades/alumno",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Novedad> updateNovedadAlumno(
        @Parameter(name = "Novedad", description = "", required = true) @Valid @RequestBody Novedad novedad
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"texto\" : \"texto\", \"fechaCreacion\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"tipoDestinatario\" : \"profesor\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
