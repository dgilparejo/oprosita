/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.oprosita.backend.api;

import com.oprosita.backend.model.generated.Alumno;
import com.oprosita.backend.model.generated.ContenidoItem;
import com.oprosita.backend.model.generated.Grupo;
import com.oprosita.backend.model.generated.Mes;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-23T22:26:08.390066400+02:00[Europe/Madrid]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "grupos", description = "Operaciones con grupos de alumnos")
public interface GruposApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /grupos/{grupoId}/alumnos : Añadir un alumno a un grupo
     *
     * @param grupoId  (required)
     * @param alumno  (required)
     * @return Alumno añadido (status code 201)
     */
    @Operation(
        operationId = "addAlumnoToGrupo",
        summary = "Añadir un alumno a un grupo",
        tags = { "grupos", "alumnos" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Alumno añadido")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/grupos/{grupoId}/alumnos",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> addAlumnoToGrupo(
        @Parameter(name = "grupoId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("grupoId") Integer grupoId,
        @Parameter(name = "Alumno", description = "", required = true) @Valid @RequestBody Alumno alumno
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /grupos/{grupoId}/meses/{mes}/contenido : Añadir contenido a un grupo en un mes
     *
     * @param grupoId  (required)
     * @param mes  (required)
     * @param contenidoItem  (required)
     * @return Contenido añadido (status code 201)
     */
    @Operation(
        operationId = "addContenidoToGrupoByMes",
        summary = "Añadir contenido a un grupo en un mes",
        tags = { "grupos", "contenido" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Contenido añadido", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContenidoItem.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/grupos/{grupoId}/meses/{mes}/contenido",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ContenidoItem> addContenidoToGrupoByMes(
        @Parameter(name = "grupoId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("grupoId") Integer grupoId,
        @Parameter(name = "mes", description = "", required = true, in = ParameterIn.PATH) @PathVariable("mes") String mes,
        @Parameter(name = "ContenidoItem", description = "", required = true) @Valid @RequestBody ContenidoItem contenidoItem
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"texto\" : \"texto\", \"alumnoId\" : 6, \"archivoId\" : 5, \"tipoContenido\" : \"temas\", \"mes\" : \"mes\", \"id\" : 0, \"grupoId\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /grupos/{grupoId}/meses : Añadir mes a un grupo
     *
     * @param grupoId  (required)
     * @param mes  (required)
     * @return Mes añadido (status code 201)
     */
    @Operation(
        operationId = "addMesToGrupo",
        summary = "Añadir mes a un grupo",
        tags = { "grupos", "meses" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Mes añadido")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/grupos/{grupoId}/meses",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> addMesToGrupo(
        @Parameter(name = "grupoId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("grupoId") Integer grupoId,
        @Parameter(name = "Mes", description = "", required = true) @Valid @RequestBody Mes mes
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /grupos : Crear un nuevo grupo
     *
     * @param grupo  (required)
     * @return Grupo creado (status code 201)
     */
    @Operation(
        operationId = "createGrupo",
        summary = "Crear un nuevo grupo",
        tags = { "grupos" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Grupo creado")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/grupos",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> createGrupo(
        @Parameter(name = "Grupo", description = "", required = true) @Valid @RequestBody Grupo grupo
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /grupos/{grupoId}/meses/{mes}/contenido : Eliminar un contenido de un grupo en un mes
     *
     * @param grupoId  (required)
     * @param mes  (required)
     * @param contenidoId  (required)
     * @return Contenido eliminado correctamente (status code 204)
     */
    @Operation(
        operationId = "deleteContenidoFromGrupoByMes",
        summary = "Eliminar un contenido de un grupo en un mes",
        tags = { "grupos", "contenido" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Contenido eliminado correctamente")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/grupos/{grupoId}/meses/{mes}/contenido"
    )
    
    default ResponseEntity<Void> deleteContenidoFromGrupoByMes(
        @Parameter(name = "grupoId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("grupoId") Integer grupoId,
        @Parameter(name = "mes", description = "", required = true, in = ParameterIn.PATH) @PathVariable("mes") String mes,
        @Parameter(name = "contenidoId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("contenidoId") Integer contenidoId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /grupos/{id} : Eliminar un grupo
     *
     * @param id  (required)
     * @return Grupo eliminado correctamente (status code 204)
     *         or Grupo no encontrado (status code 404)
     */
    @Operation(
        operationId = "deleteGrupo",
        summary = "Eliminar un grupo",
        tags = { "grupos" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Grupo eliminado correctamente"),
            @ApiResponse(responseCode = "404", description = "Grupo no encontrado")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/grupos/{id}"
    )
    
    default ResponseEntity<Void> deleteGrupo(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /grupos/{grupoId}/alumnos : Obtener alumnos de un grupo
     *
     * @param grupoId  (required)
     * @return Lista de alumnos (status code 200)
     */
    @Operation(
        operationId = "getAlumnosByGrupo",
        summary = "Obtener alumnos de un grupo",
        tags = { "grupos", "alumnos" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de alumnos", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Alumno.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/grupos/{grupoId}/alumnos",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Alumno>> getAlumnosByGrupo(
        @Parameter(name = "grupoId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("grupoId") Integer grupoId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"tipo\" : \"alumno\", \"id\" : 0, \"grupoId\" : 6, \"nombre\" : \"nombre\" }, { \"tipo\" : \"alumno\", \"id\" : 0, \"grupoId\" : 6, \"nombre\" : \"nombre\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /grupos/{grupoId}/meses/{mes}/contenido : Obtener contenido por grupo y mes
     *
     * @param grupoId  (required)
     * @param mes  (required)
     * @return Lista de contenido (status code 200)
     */
    @Operation(
        operationId = "getContenidoByGrupoAndMes",
        summary = "Obtener contenido por grupo y mes",
        tags = { "grupos", "contenido" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de contenido", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ContenidoItem.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/grupos/{grupoId}/meses/{mes}/contenido",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ContenidoItem>> getContenidoByGrupoAndMes(
        @Parameter(name = "grupoId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("grupoId") Integer grupoId,
        @Parameter(name = "mes", description = "", required = true, in = ParameterIn.PATH) @PathVariable("mes") String mes
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"texto\" : \"texto\", \"alumnoId\" : 6, \"archivoId\" : 5, \"tipoContenido\" : \"temas\", \"mes\" : \"mes\", \"id\" : 0, \"grupoId\" : 1 }, { \"texto\" : \"texto\", \"alumnoId\" : 6, \"archivoId\" : 5, \"tipoContenido\" : \"temas\", \"mes\" : \"mes\", \"id\" : 0, \"grupoId\" : 1 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /grupos/{id} : Obtener detalle de un grupo
     *
     * @param id  (required)
     * @return Grupo encontrado (status code 200)
     *         or Grupo no encontrado (status code 404)
     */
    @Operation(
        operationId = "getGrupoById",
        summary = "Obtener detalle de un grupo",
        tags = { "grupos" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Grupo encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Grupo.class))
            }),
            @ApiResponse(responseCode = "404", description = "Grupo no encontrado")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/grupos/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Grupo> getGrupoById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"meses\" : [ { \"id\" : 6, \"nombre\" : \"nombre\" }, { \"id\" : 6, \"nombre\" : \"nombre\" } ], \"id\" : 0, \"nombre\" : \"nombre\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /grupos : Obtener todos los grupos
     *
     * @return Lista de grupos (status code 200)
     *         or Error interno (status code 500)
     */
    @Operation(
        operationId = "getGrupos",
        summary = "Obtener todos los grupos",
        tags = { "grupos" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de grupos", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Grupo.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/grupos",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Grupo>> getGrupos(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"meses\" : [ { \"id\" : 6, \"nombre\" : \"nombre\" }, { \"id\" : 6, \"nombre\" : \"nombre\" } ], \"id\" : 0, \"nombre\" : \"nombre\" }, { \"meses\" : [ { \"id\" : 6, \"nombre\" : \"nombre\" }, { \"id\" : 6, \"nombre\" : \"nombre\" } ], \"id\" : 0, \"nombre\" : \"nombre\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /grupos/{grupoId}/meses : Obtener meses de un grupo
     *
     * @param grupoId  (required)
     * @return Lista de meses (status code 200)
     */
    @Operation(
        operationId = "getMesesByGrupo",
        summary = "Obtener meses de un grupo",
        tags = { "grupos", "meses" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de meses", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Mes.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/grupos/{grupoId}/meses",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Mes>> getMesesByGrupo(
        @Parameter(name = "grupoId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("grupoId") Integer grupoId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"id\" : 6, \"nombre\" : \"nombre\" }, { \"id\" : 6, \"nombre\" : \"nombre\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /grupos/{grupoId}/alumnos/{alumnoId} : Eliminar un alumno de un grupo
     *
     * @param grupoId  (required)
     * @param alumnoId  (required)
     * @return Alumno eliminado correctamente del grupo (status code 204)
     */
    @Operation(
        operationId = "removeAlumnoFromGrupo",
        summary = "Eliminar un alumno de un grupo",
        tags = { "grupos", "alumnos" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Alumno eliminado correctamente del grupo")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/grupos/{grupoId}/alumnos/{alumnoId}"
    )
    
    default ResponseEntity<Void> removeAlumnoFromGrupo(
        @Parameter(name = "grupoId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("grupoId") Integer grupoId,
        @Parameter(name = "alumnoId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("alumnoId") Integer alumnoId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /grupos/{id} : Actualizar un grupo
     *
     * @param id  (required)
     * @param grupo  (required)
     * @return Grupo actualizado (status code 200)
     */
    @Operation(
        operationId = "updateGrupo",
        summary = "Actualizar un grupo",
        tags = { "grupos" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Grupo actualizado")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/grupos/{id}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> updateGrupo(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Grupo", description = "", required = true) @Valid @RequestBody Grupo grupo
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
