/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.oprosita.backend.api;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-23T22:26:08.390066400+02:00[Europe/Madrid]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "archivos", description = "Gesti√≥n de archivos y documentos")
public interface ArchivosApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /archivos/{id}/download : Descargar archivo por ID
     *
     * @param id  (required)
     * @return Archivo descargado (status code 200)
     *         or Archivo no encontrado (status code 404)
     */
    @Operation(
        operationId = "downloadArchivo",
        summary = "Descargar archivo por ID",
        tags = { "archivos" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Archivo descargado", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "404", description = "Archivo no encontrado")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/archivos/{id}/download",
        produces = { "application/octet-stream" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> downloadArchivo(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /archivos/upload : Subir archivo
     *
     * @param file  (optional)
     * @return Archivo subido correctamente (status code 201)
     */
    @Operation(
        operationId = "uploadArchivo",
        summary = "Subir archivo",
        tags = { "archivos" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Archivo subido correctamente")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/archivos/upload",
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<Void> uploadArchivo(
        @Parameter(name = "file", description = "") @RequestPart(value = "file", required = false) MultipartFile file
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
