/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.oprosita.backend.api;

import com.oprosita.backend.model.generated.Noticia;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-23T22:26:08.390066400+02:00[Europe/Madrid]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "noticias", description = "Gestión de noticias")
public interface NoticiasApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /noticias : Crear una nueva noticia (PDF + descripción)
     *
     * @param descripcion  (optional)
     * @param grupoId  (optional)
     * @param file  (optional)
     * @return Noticia creada (status code 201)
     */
    @Operation(
        operationId = "createNoticia",
        summary = "Crear una nueva noticia (PDF + descripción)",
        tags = { "noticias" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Noticia creada", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Noticia.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/noticias",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<Noticia> createNoticia(
        @Parameter(name = "descripcion", description = "") @Valid @RequestParam(value = "descripcion", required = false) String descripcion,
        @Parameter(name = "grupoId", description = "") @Valid @RequestParam(value = "grupoId", required = false) Integer grupoId,
        @Parameter(name = "file", description = "") @RequestPart(value = "file", required = false) MultipartFile file
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"descripcion\" : \"descripcion\", \"archivoId\" : 6, \"id\" : 0, \"grupoId\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /noticias/{id} : Eliminar una noticia
     *
     * @param id  (required)
     * @return Noticia eliminada correctamente (status code 204)
     */
    @Operation(
        operationId = "deleteNoticia",
        summary = "Eliminar una noticia",
        tags = { "noticias" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Noticia eliminada correctamente")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/noticias/{id}"
    )
    
    default ResponseEntity<Void> deleteNoticia(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /noticias : Obtener noticias
     *
     * @return Lista de noticias (status code 200)
     */
    @Operation(
        operationId = "getNoticias",
        summary = "Obtener noticias",
        tags = { "noticias" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de noticias", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Noticia.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/noticias",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Noticia>> getNoticias(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"descripcion\" : \"descripcion\", \"archivoId\" : 6, \"id\" : 0, \"grupoId\" : 1 }, { \"descripcion\" : \"descripcion\", \"archivoId\" : 6, \"id\" : 0, \"grupoId\" : 1 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
